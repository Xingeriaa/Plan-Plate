<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Quản Lý Người Dùng - PlannPlate Admin</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
  <link rel="icon" type="image/x-icon" href="/images/logo.png">
  <style>
    .sidebar {
      min-height: calc(100vh - 56px);
      background-color: #f8f9fa;
    }
    .user-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background-color: #6c757d;
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
    }
    
    /* Enhanced styles to match the image */
    .table th {
      border-top: none;
      border-bottom: 1px solid #dee2e6;
      font-weight: 600;
    }
    
    .table td {
      vertical-align: middle;
    }
    
    .badge {
      font-weight: 500;
      padding: 0.4em 0.6em;
    }
    
    .btn-group .btn {
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      margin: 0 2px;
    }
    
    .btn-outline-primary {
      color: #0d6efd;
      border-color: #0d6efd;
    }
    
    .btn-outline-danger {
      color: #dc3545;
      border-color: #dc3545;
    }
    
    .pagination {
      margin-bottom: 0;
    }
    
    .card {
      border-radius: 8px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
  </style>
</head>
<body>
  <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
    <div class="container-fluid">
      <a class="navbar-brand" href="/admin">Quản Trị PlannPlate</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav me-auto">
          <li class="nav-item">
            <a class="nav-link" href="/admin">Bảng Điều Khiển</a>
          </li>
          <li class="nav-item">
            <a class="nav-link active" href="/admin/users">Người Dùng</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/admin/products">Sản Phẩm</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/admin/orders">Đơn Hàng</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/admin/categories">Danh Mục</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/admin/reports">Báo Cáo</a>
          </li>
        </ul>
        <ul class="navbar-nav">
          <li class="nav-item">
            <a class="nav-link" href="/profile">Quay Lại Hồ Sơ</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/logout">Đăng Xuất</a>
          </li>
        </ul>
      </div>
    </div>
  </nav>

  <div class="container-fluid">
    <div class="row">
      <div class="col-md-3 col-lg-2 d-md-block sidebar p-3">
        <div class="list-group">
          <a href="/admin" class="list-group-item list-group-item-action">Bảng Điều Khiển</a>
          <a href="/admin/users" class="list-group-item list-group-item-action active">Người Dùng</a>
          <a href="/admin/products" class="list-group-item list-group-item-action">Sản Phẩm</a>
          <a href="/admin/orders" class="list-group-item list-group-item-action">Đơn Hàng</a>
          <a href="/admin/categories" class="list-group-item list-group-item-action">Danh Mục</a>
          <a href="/admin/reports" class="list-group-item list-group-item-action">Báo Cáo</a>
        </div>
      </div>
      <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 py-4">
        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
          <h1>Quản Lý Người Dùng</h1>
          <div class="btn-toolbar mb-2 mb-md-0">
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addUserModal">
              <i class="bi bi-person-plus"></i> Thêm Người Dùng Mới
            </button>
          </div>
        </div>
        
        <!-- Search and Filter -->
        <div class="row mb-4">
          <div class="col-md-6">
            <div class="input-group">
              <input type="text" class="form-control" id="searchUser" placeholder="Tìm kiếm người dùng...">
              <button class="btn btn-outline-secondary" type="button" id="searchButton">
                <i class="bi bi-search"></i>
              </button>
            </div>
          </div>
          <div class="col-md-3">
            <select class="form-select" id="roleFilter">
              <option value="">Tất Cả Vai Trò</option>
              <option value="Admin">Quản Trị Viên</option>
              <option value="NguoiDung">Người Dùng Thường</option>
            </select>
          </div>
          <div class="col-md-3">
            <select class="form-select" id="sortUsers">
              <option value="name">Tên (A-Z)</option>
              <option value="newest">Mới nhất trước</option>
              <option value="oldest">Cũ nhất trước</option>
            </select>
          </div>
        </div>
        
        <!-- Users Table -->
        <div class="card">
          <div class="card-body">
            <div class="table-responsive">
              <table class="table table-striped table-hover">
                <thead>
                  <tr>
                    <!-- ID column hidden with CSS instead of removed -->
                    <th style="display: none;">ID</th>
                    <th>Người Dùng</th>
                    <th>Email</th>
                    <th>Vai Trò</th>
                    <th>Ngày Tạo</th>
                    <th>Thao Tác</th>
                  </tr>
                </thead>
                <tbody>
                  <% if (users && users.length > 0) { %>
                    <% users.forEach(user => { %>
                      <tr>
                        <!-- ID column hidden but still present for reference -->
                        <td style="display: none;"><%= user.IDTaiKhoan %></td>
                        <td>
                          <div class="d-flex align-items-center">
                            <div class="user-avatar me-2">
                              <%= user.TenNguoiDung.charAt(0).toUpperCase() %>
                            </div>
                            <%= user.TenNguoiDung %>
                          </div>
                        </td>
                        <!-- Rest of the row remains unchanged -->
                        <td><%= user.Email %></td>
                        <td>
                          <span class="badge <%= user.VaiTro === 'Admin' ? 'bg-danger' : 'bg-success' %>">
                            <%= user.VaiTro %>
                          </span>
                        </td>
                        <td><%= new Date(user.NgayTao).toLocaleDateString() %></td>
                        <td>
                          <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-primary" onclick="editUser('<%= user.IDTaiKhoan %>')">
                              <i class="bi bi-pencil"></i>
                            </button>
                            <button class="btn btn-outline-danger <%= user.VaiTro === 'Admin' ? 'disabled' : '' %>" 
                                    <%= user.VaiTro === 'Admin' ? 'disabled' : '' %>
                                    onclick="deleteUser(<%= user.IDTaiKhoan %>)">
                              <i class="bi bi-trash"></i>
                            </button>
                          </div>
                        </td>
                      </tr>
                    <% }); %>
                  <% } else { %>
                    <tr>
                      <td colspan="6" class="text-center">Không tìm thấy người dùng nào</td>
                    </tr>
                  <% } %>
                </tbody>
              </table>
            </div>
            
            <!-- Pagination -->
            <% if (typeof pagination !== 'undefined' && pagination && pagination.totalPages > 1) { %>
              <nav aria-label="Page navigation" class="mt-4">
                <ul class="pagination justify-content-center">
                  <li class="page-item <%= pagination.currentPage === 1 ? 'disabled' : '' %>">
                    <a class="page-link" href="/admin/users?page=<%= pagination.currentPage - 1 %>" aria-label="Previous">
                      <span aria-hidden="true">&laquo;</span>
                    </a>
                  </li>
                  
                  <% for(let i = 1; i <= pagination.totalPages; i++) { %>
                    <li class="page-item <%= pagination.currentPage === i ? 'active' : '' %>">
                      <a class="page-link" href="/admin/users?page=<%= i %>"><%= i %></a>
                    </li>
                  <% } %>
                  
                  <li class="page-item <%= pagination.currentPage === pagination.totalPages ? 'disabled' : '' %>">
                    <a class="page-link" href="/admin/users?page=<%= pagination.currentPage + 1 %>" aria-label="Next">
                      <span aria-hidden="true">&raquo;</span>
                    </a>
                  </li>
                </ul>
              </nav>
            <% } %>
          </div>
        </div>
      </main>
    </div>
  </div>

  <!-- Add User Modal -->
  <div class="modal fade" id="addUserModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Thêm Người Dùng Mới</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="addUserForm" action="/admin/users/add" method="POST">
            <div class="mb-3">
              <label for="fullName" class="form-label">Họ Tên</label>
              <input type="text" class="form-control" id="fullName" name="fullName" required>
            </div>
            <div class="mb-3">
              <label for="email" class="form-label">Địa Chỉ Email</label>
              <input type="email" class="form-control" id="email" name="email" required>
            </div>
            <div class="mb-3">
              <label for="password" class="form-label">Mật Khẩu</label>
              <input type="password" class="form-control" id="password" name="password" required>
            </div>
            <div class="mb-3">
              <label for="role" class="form-label">Vai Trò</label>
              <select class="form-select" id="role" name="role" required>
                <option value="NguoiDung">Người Dùng Thường</option>
                <option value="Admin">Quản Trị Viên</option>
              </select>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
          <button type="submit" form="addUserForm" class="btn btn-primary">Thêm Người Dùng</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Edit User Modal -->
  <div class="modal fade" id="editUserModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Chỉnh Sửa Người Dùng</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="editUserForm" action="/admin/users/update" method="POST">
            <input type="hidden" id="editUserId" name="userId">
            <div class="mb-3">
              <label for="editFullName" class="form-label">Họ Tên</label>
              <input type="text" class="form-control" id="editFullName" name="fullName" required>
            </div>
            <div class="mb-3">
              <label for="editEmail" class="form-label">Địa Chỉ Email</label>
              <input type="email" class="form-control" id="editEmail" name="email" required>
            </div>
            <div class="mb-3">
              <label for="editPassword" class="form-label">Mật Khẩu Mới (để trống nếu giữ nguyên)</label>
              <input type="password" class="form-control" id="editPassword" name="password">
            </div>
            <div class="mb-3">
              <label for="editRole" class="form-label">Vai Trò</label>
              <select class="form-select" id="editRole" name="role" required>
                <option value="NguoiDung">Người Dùng Thường</option>
                <option value="Admin">Quản Trị Viên</option>
              </select>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
          <button type="submit" form="editUserForm" class="btn btn-primary">Lưu Thay Đổi</button>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script>
      // Edit user function
      function editUser(userId) {
        console.log(`Editing user with ID: ${userId}`);
        
        // Show loading indicator or message
        const loadingMessage = document.createElement('div');
        loadingMessage.className = 'alert alert-info';
        loadingMessage.textContent = 'Đang tải dữ liệu người dùng...';
        document.body.appendChild(loadingMessage);
        
        fetch(`/admin/users/${userId}`)
          .then(response => {
            // Remove loading message
            document.body.removeChild(loadingMessage);
            
            if (!response.ok) {
              throw new Error(`Máy chủ trả về ${response.status}: ${response.statusText}`);
            }
            return response.json();
          })
          .then(user => {
            console.log('Đã nhận dữ liệu người dùng:', user);
            document.getElementById('editUserId').value = user.IDTaiKhoan;
            document.getElementById('editFullName').value = user.TenNguoiDung;
            document.getElementById('editEmail').value = user.Email;
            document.getElementById('editRole').value = user.VaiTro;
            
            const modal = new bootstrap.Modal(document.getElementById('editUserModal'));
            modal.show();
          })
          .catch(error => {
            console.error('Lỗi khi lấy dữ liệu người dùng:', error);
            alert(`Lỗi khi tải dữ liệu người dùng: ${error.message}`);
          });
      }
      
      // Delete user function
      function deleteUser(userId) {
        if (confirm('Bạn có chắc chắn muốn xóa người dùng này?')) {
          fetch(`/admin/users/${userId}`, {
            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json'
            }
          })
          .then(response => {
            if (!response.ok) {
              return response.json().then(data => {
                throw new Error(data.error || 'Không thể xóa người dùng');
              });
            }
            return response.json();
          })
          .then(data => {
            if (data.success) {
              window.location.reload();
            }
          })
          .catch(error => {
            console.error('Lỗi:', error);
            alert(error.message || 'Đã xảy ra lỗi khi xóa người dùng');
          });
        }
      }
  
      // Add event listeners for search and filter functionality
      document.addEventListener('DOMContentLoaded', function() {
        const searchInput = document.getElementById('searchUser');
        const searchButton = document.getElementById('searchButton');
        const roleFilter = document.getElementById('roleFilter');
        const sortUsers = document.getElementById('sortUsers');
        
        // Set initial values from URL parameters
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.has('search')) {
          searchInput.value = urlParams.get('search');
        }
        if (urlParams.has('role')) {
          roleFilter.value = urlParams.get('role');
        }
        if (urlParams.has('sort')) {
          sortUsers.value = urlParams.get('sort');
        }
        
        // Function to build query string from current filters
        function buildQueryString() {
          const params = new URLSearchParams(window.location.search);
          
          // Update or add parameters
          if (searchInput.value.trim()) {
            params.set('search', searchInput.value.trim());
          } else {
            params.delete('search');
          }
          
          if (roleFilter.value) {
            params.set('role', roleFilter.value);
          } else {
            params.delete('role');
          }
          
          if (sortUsers.value) {
            params.set('sort', sortUsers.value);
          } else {
            params.delete('sort');
          }
          
          // Preserve the page parameter only if we're not changing filters
          if (params.has('page') && (
              params.has('search') || 
              params.has('role') || 
              params.has('sort'))) {
            params.delete('page');
          }
          
          return params.toString();
        }
        
        // Search button click handler
        searchButton.addEventListener('click', function() {
          const queryString = buildQueryString();
          window.location.href = `/admin/users${queryString ? '?' + queryString : ''}`;
        });
        
        // Enter key in search input
        searchInput.addEventListener('keyup', function(event) {
          if (event.key === 'Enter') {
            searchButton.click();
          }
        });
        
        // Role filter change handler
        roleFilter.addEventListener('change', function() {
          const queryString = buildQueryString();
          window.location.href = `/admin/users${queryString ? '?' + queryString : ''}`;
        });
        
        // Sort users change handler
        sortUsers.addEventListener('change', function() {
          const queryString = buildQueryString();
          window.location.href = `/admin/users${queryString ? '?' + queryString : ''}`;
        });
        
        // Sort table rows alphabetically by name
        function sortTable() {
          const table = document.querySelector('table');
          const tbody = table.querySelector('tbody');
          const rows = Array.from(tbody.querySelectorAll('tr'));
          
          // Skip sorting if no rows or only one row
          if (rows.length <= 1) return;
          
          // Get current sort option
          const currentSort = sortUsers ? sortUsers.value : 'name';
          
          // Sort rows based on selected sort option
          rows.sort((a, b) => {
            if (currentSort === 'newest') {
              // For newest first, compare dates (index 4)
              const dateA = new Date(a.cells[4].textContent.trim());
              const dateB = new Date(b.cells[4].textContent.trim());
              return dateB - dateA; // Newest first (descending)
            } 
            else if (currentSort === 'oldest') {
              // For oldest first, compare dates (index 4)
              const dateA = new Date(a.cells[4].textContent.trim());
              const dateB = new Date(b.cells[4].textContent.trim());
              return dateA - dateB; // Oldest first (ascending)
            } 
            else {
              // Default to name sorting (A-Z)
              const nameA = a.cells[1].textContent.trim().toLowerCase();
              const nameB = b.cells[1].textContent.trim().toLowerCase();
              return nameA.localeCompare(nameB, 'en', { sensitivity: 'base' });
            }
          });
          
          // Append sorted rows back to tbody
          rows.forEach(row => tbody.appendChild(row));
        }
        
        // Call the sort function when page loads
        sortTable();
        
        // Also call sortTable when sort option changes
        sortUsers.addEventListener('change', function() {
          const queryString = buildQueryString();
          
          // If we're doing client-side sorting only (no page refresh)
          if (!queryString) {
            sortTable();
            return;
          }
          
          // Otherwise, navigate to the new URL with sort parameter
          window.location.href = `/admin/users${queryString ? '?' + queryString : ''}`;
        });
        
        // Form validation for adding users
        const addUserForm = document.getElementById('addUserForm');
        if (addUserForm) {
          addUserForm.addEventListener('submit', function(event) {
            // Prevent the default form submission
            event.preventDefault();
            
            // Get form values
            const fullName = document.getElementById('fullName').value.trim();
            const email = document.getElementById('email').value.trim();
            const password = document.getElementById('password').value;
            const role = document.getElementById('role').value;
            
            // Basic validation
            if (!fullName || !email || !password || !role) {
              alert('Vui lòng điền đầy đủ thông tin');
              return;
            }
            
            // Email validation
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email)) {
              alert('Vui lòng nhập địa chỉ email hợp lệ');
              return;
            }
            
            // Password validation (at least 6 characters)
            if (password.length < 6) {
              alert('Mật khẩu phải có ít nhất 6 ký tự');
              return;
            }
            
            // If all validations pass, submit the form
            this.submit();
          });
        }
        
        // Form validation for editing users
        const editUserForm = document.getElementById('editUserForm');
        if (editUserForm) {
          editUserForm.addEventListener('submit', function(event) {
            // Prevent the default form submission
            event.preventDefault();
            
            // Get form values
            const fullName = document.getElementById('editFullName').value.trim();
            const email = document.getElementById('editEmail').value.trim();
            const role = document.getElementById('editRole').value;
            
            // Basic validation
            if (!fullName || !email || !role) {
              alert('Tên, email và vai trò là bắt buộc');
              return;
            }
            
            // Email validation
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email)) {
              alert('Vui lòng nhập địa chỉ email hợp lệ');
              return;
            }
            
            // If all validations pass, submit the form
            this.submit();
          });
        }
      });
    </script>
  </script>
</body>
</html>